name: Remote Script Execution

on:
  #push:
   # branches:
      #- main
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment to process'
        required: true
        default: 'us-uat'

jobs:
  execute-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Read JSON and Run Script on Remote Server
        env:
          ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
        run: |
          # Read JSON file
          JSON_FILE="portal/data.json"
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          
          # Check if jq is installed, install if not
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Get version and code data from JSON
          VERSIONS=$(jq -r ".${ENVIRONMENT} | to_entries | map(\"\(.key) \(.value)\") | .[]" $JSON_FILE)
          CODES=$(jq -r ".${ENVIRONMENT}-codes | to_entries | map(\"\(.key) \(.value)\") | .[]" $JSON_FILE)

          # Prepare associative arrays for versions and codes
          declare -A versionMap
          declare -A codeMap

          while read -r key version; do
            versionMap[$key]=$version
          done <<< "$VERSIONS"

          while read -r key code; do
            codeMap[$key]=$code
          done <<< "$CODES"

          # Define SSH parameters
          REMOTE_HOST="your.remote.server.com"
          SSH_USER="your-username"
          REMOTE_SCRIPT="/path/to/scripts/script.sh"
          SSH_OPTIONS="-i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"

          # Iterate through versions and execute the remote script
          for app in "${!versionMap[@]}"; do
            version=${versionMap[$app]}
            code=${codeMap[$app]}
            ssh $SSH_OPTIONS $SSH_USER@$REMOTE_HOST "$REMOTE_SCRIPT $version $code"
          done
          
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
